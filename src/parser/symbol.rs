use lexer::Token;
use semantic::SemanticActionType;

#[derive(Debug, Clone)]
pub enum ParseSymbol {
    Epsilon,
    Terminal(Token),
    Nonterminal(NonterminalLabel),
    SemanticAction(SemanticActionType),
    PopError,
    ScanError
}

#[derive(PartialEq, Eq, Hash, Debug, Clone)]
pub enum NonterminalLabel {
    Program,
    AdditiveOperator,
    ArithmeticExpression,
    ArithmeticExpressionTail,
    ArithmeticOrRelationalExpression,
    ArraySize,
    ArraySizeRecursion,
    AssignmentStatement,
    ClassDeclaration,
    ClassDeclarationRecursion,
    Expression,
    Factor,
    FunctionArguments,
    FunctionArgumentsTail,
    FunctionArgumentsTailRecursion,
    FunctionBody,
    FunctionCallOrVariable,
    FunctionCallOrVariableTail,
    FunctionCallOrVariableTailRecursion,
    FunctionCallParensOrIndexing,
    FunctionDeclarationRecursionStart,
    FunctionDeclarationRecursionTail,
    FunctionDefinition,
    FunctionDefinitionRecursion,
    FunctionHeader,
    FunctionParameters,
    FunctionParametersTail,
    FunctionParametersTailRecursion,
    IdListRecursion,
    Indexing,
    IndexingRecursion,
    MultiplicativeOperator,
    NegationOperator,
    NumberSign,
    NumberType,
    OptionalInheritanceList,
    OptionalNamespacing,
    OptionalNamespacingTail,
    RelationalExpression,
    RelationalOperator,
    Statement,
    StatementBlock,
    StatementRecursion,
    StatementWithoutAssignment,
    Term,
    TermRecursion,
    Type,
    Variable,
    VariableDeclarationRecursionThenStatementRecursionA,
    VariableDeclarationRecursionThenStatementRecursionB,
    VariableTail,
    VariableTailTail,
    VariableThenFunctionDeclarationRecursion,
    VariableThenFunctionDeclarationRecursionTail,
}

