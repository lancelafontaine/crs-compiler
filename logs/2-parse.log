"Applies production Nonterminal(Program) --> [Nonterminal(ClassDeclarationRecursion), SemanticAction(ClassDeclarationList), Nonterminal(FunctionDefinitionRecursion), SemanticAction(FunctionDefinitionList), Terminal(Token { class: Keyword, lexeme: \"program\" }), Nonterminal(FunctionBody), SemanticAction(ProgramFamily), Terminal(Token { class: Semicolon, lexeme: \";\" })]"
"Next input token: Token { class: Keyword, lexeme: \"class\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList), Nonterminal(FunctionDefinitionRecursion), SemanticAction(ClassDeclarationList), Nonterminal(ClassDeclarationRecursion)] }"
"--------------------------------------------------"
"Applies production Nonterminal(ClassDeclarationRecursion) --> [Nonterminal(ClassDeclaration), Nonterminal(ClassDeclarationRecursion)]"
"Next input token: Token { class: Keyword, lexeme: \"class\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList), Nonterminal(FunctionDefinitionRecursion), SemanticAction(ClassDeclarationList), Nonterminal(ClassDeclarationRecursion), Nonterminal(ClassDeclaration)] }"
"--------------------------------------------------"
"Applies production Nonterminal(ClassDeclaration) --> [Terminal(Token { class: Keyword, lexeme: \"class\" }), SemanticAction(ClassId), Terminal(Token { class: Identifier, lexeme: \"id\" }), Nonterminal(OptionalInheritanceList), SemanticAction(InheritanceList), Terminal(Token { class: OpenCurlyBrace, lexeme: \"{\" }), Nonterminal(VariableThenFunctionDeclarationRecursion), SemanticAction(ClassMemberDeclarationList), SemanticAction(ClassDeclaration), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), Terminal(Token { class: Semicolon, lexeme: \";\" })]"
"Next input token: Token { class: Keyword, lexeme: \"class\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList), Nonterminal(FunctionDefinitionRecursion), SemanticAction(ClassDeclarationList), Nonterminal(ClassDeclarationRecursion), Terminal(Token { class: Semicolon, lexeme: \";\" }), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(ClassDeclaration), SemanticAction(ClassMemberDeclarationList), Nonterminal(VariableThenFunctionDeclarationRecursion), Terminal(Token { class: OpenCurlyBrace, lexeme: \"{\" }), SemanticAction(InheritanceList), Nonterminal(OptionalInheritanceList), Terminal(Token { class: Identifier, lexeme: \"id\" }), SemanticAction(ClassId), Terminal(Token { class: Keyword, lexeme: \"class\" })] }"
"--------------------------------------------------"
"Matched terminal: Token { class: Keyword, lexeme: \"class\" }, popped off parsing_stack"
"Next input token: Token { class: Keyword, lexeme: \"class\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList), Nonterminal(FunctionDefinitionRecursion), SemanticAction(ClassDeclarationList), Nonterminal(ClassDeclarationRecursion), Terminal(Token { class: Semicolon, lexeme: \";\" }), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(ClassDeclaration), SemanticAction(ClassMemberDeclarationList), Nonterminal(VariableThenFunctionDeclarationRecursion), Terminal(Token { class: OpenCurlyBrace, lexeme: \"{\" }), SemanticAction(InheritanceList), Nonterminal(OptionalInheritanceList), Terminal(Token { class: Identifier, lexeme: \"id\" }), SemanticAction(ClassId)] }"
"--------------------------------------------------"
"Popped semantic action: ClassId"
"Next input token: Token { class: Identifier, lexeme: \"Test\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList), Nonterminal(FunctionDefinitionRecursion), SemanticAction(ClassDeclarationList), Nonterminal(ClassDeclarationRecursion), Terminal(Token { class: Semicolon, lexeme: \";\" }), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(ClassDeclaration), SemanticAction(ClassMemberDeclarationList), Nonterminal(VariableThenFunctionDeclarationRecursion), Terminal(Token { class: OpenCurlyBrace, lexeme: \"{\" }), SemanticAction(InheritanceList), Nonterminal(OptionalInheritanceList), Terminal(Token { class: Identifier, lexeme: \"id\" })] }"
"--------------------------------------------------"
"Matched terminal: Token { class: Identifier, lexeme: \"Test\" }, popped off parsing_stack"
"Next input token: Token { class: Identifier, lexeme: \"Test\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList), Nonterminal(FunctionDefinitionRecursion), SemanticAction(ClassDeclarationList), Nonterminal(ClassDeclarationRecursion), Terminal(Token { class: Semicolon, lexeme: \";\" }), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(ClassDeclaration), SemanticAction(ClassMemberDeclarationList), Nonterminal(VariableThenFunctionDeclarationRecursion), Terminal(Token { class: OpenCurlyBrace, lexeme: \"{\" }), SemanticAction(InheritanceList), Nonterminal(OptionalInheritanceList)] }"
"--------------------------------------------------"
"Applies production Nonterminal(OptionalInheritanceList) --> [Epsilon]"
"Next input token: Token { class: OpenCurlyBrace, lexeme: \"{\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList), Nonterminal(FunctionDefinitionRecursion), SemanticAction(ClassDeclarationList), Nonterminal(ClassDeclarationRecursion), Terminal(Token { class: Semicolon, lexeme: \";\" }), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(ClassDeclaration), SemanticAction(ClassMemberDeclarationList), Nonterminal(VariableThenFunctionDeclarationRecursion), Terminal(Token { class: OpenCurlyBrace, lexeme: \"{\" }), SemanticAction(InheritanceList), Epsilon] }"
"--------------------------------------------------"
"Matched EPSILON, popped off parsing_stack"
"Next input token: Token { class: OpenCurlyBrace, lexeme: \"{\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList), Nonterminal(FunctionDefinitionRecursion), SemanticAction(ClassDeclarationList), Nonterminal(ClassDeclarationRecursion), Terminal(Token { class: Semicolon, lexeme: \";\" }), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(ClassDeclaration), SemanticAction(ClassMemberDeclarationList), Nonterminal(VariableThenFunctionDeclarationRecursion), Terminal(Token { class: OpenCurlyBrace, lexeme: \"{\" }), SemanticAction(InheritanceList)] }"
"--------------------------------------------------"
"Popped semantic action: InheritanceList"
"Next input token: Token { class: OpenCurlyBrace, lexeme: \"{\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList), Nonterminal(FunctionDefinitionRecursion), SemanticAction(ClassDeclarationList), Nonterminal(ClassDeclarationRecursion), Terminal(Token { class: Semicolon, lexeme: \";\" }), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(ClassDeclaration), SemanticAction(ClassMemberDeclarationList), Nonterminal(VariableThenFunctionDeclarationRecursion), Terminal(Token { class: OpenCurlyBrace, lexeme: \"{\" })] }"
"--------------------------------------------------"
"Matched terminal: Token { class: OpenCurlyBrace, lexeme: \"{\" }, popped off parsing_stack"
"Next input token: Token { class: OpenCurlyBrace, lexeme: \"{\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList), Nonterminal(FunctionDefinitionRecursion), SemanticAction(ClassDeclarationList), Nonterminal(ClassDeclarationRecursion), Terminal(Token { class: Semicolon, lexeme: \";\" }), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(ClassDeclaration), SemanticAction(ClassMemberDeclarationList), Nonterminal(VariableThenFunctionDeclarationRecursion)] }"
"--------------------------------------------------"
"Applies production Nonterminal(VariableThenFunctionDeclarationRecursion) --> [Epsilon]"
"Next input token: Token { class: CloseCurlyBrace, lexeme: \"}\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList), Nonterminal(FunctionDefinitionRecursion), SemanticAction(ClassDeclarationList), Nonterminal(ClassDeclarationRecursion), Terminal(Token { class: Semicolon, lexeme: \";\" }), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(ClassDeclaration), SemanticAction(ClassMemberDeclarationList), Epsilon] }"
"--------------------------------------------------"
"Matched EPSILON, popped off parsing_stack"
"Next input token: Token { class: CloseCurlyBrace, lexeme: \"}\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList), Nonterminal(FunctionDefinitionRecursion), SemanticAction(ClassDeclarationList), Nonterminal(ClassDeclarationRecursion), Terminal(Token { class: Semicolon, lexeme: \";\" }), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(ClassDeclaration), SemanticAction(ClassMemberDeclarationList)] }"
"--------------------------------------------------"
"Popped semantic action: ClassMemberDeclarationList"
"Next input token: Token { class: CloseCurlyBrace, lexeme: \"}\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList), Nonterminal(FunctionDefinitionRecursion), SemanticAction(ClassDeclarationList), Nonterminal(ClassDeclarationRecursion), Terminal(Token { class: Semicolon, lexeme: \";\" }), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(ClassDeclaration)] }"
"--------------------------------------------------"
"Popped semantic action: ClassDeclaration"
"Next input token: Token { class: CloseCurlyBrace, lexeme: \"}\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList), Nonterminal(FunctionDefinitionRecursion), SemanticAction(ClassDeclarationList), Nonterminal(ClassDeclarationRecursion), Terminal(Token { class: Semicolon, lexeme: \";\" }), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" })] }"
"--------------------------------------------------"
"Matched terminal: Token { class: CloseCurlyBrace, lexeme: \"}\" }, popped off parsing_stack"
"Next input token: Token { class: CloseCurlyBrace, lexeme: \"}\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList), Nonterminal(FunctionDefinitionRecursion), SemanticAction(ClassDeclarationList), Nonterminal(ClassDeclarationRecursion), Terminal(Token { class: Semicolon, lexeme: \";\" })] }"
"--------------------------------------------------"
"Matched terminal: Token { class: Semicolon, lexeme: \";\" }, popped off parsing_stack"
"Next input token: Token { class: Semicolon, lexeme: \";\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList), Nonterminal(FunctionDefinitionRecursion), SemanticAction(ClassDeclarationList), Nonterminal(ClassDeclarationRecursion)] }"
"--------------------------------------------------"
"Applies production Nonterminal(ClassDeclarationRecursion) --> [Epsilon]"
"Next input token: Token { class: Keyword, lexeme: \"program\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList), Nonterminal(FunctionDefinitionRecursion), SemanticAction(ClassDeclarationList), Epsilon] }"
"--------------------------------------------------"
"Matched EPSILON, popped off parsing_stack"
"Next input token: Token { class: Keyword, lexeme: \"program\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList), Nonterminal(FunctionDefinitionRecursion), SemanticAction(ClassDeclarationList)] }"
"--------------------------------------------------"
"Popped semantic action: ClassDeclarationList"
"Next input token: Token { class: Keyword, lexeme: \"program\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList), Nonterminal(FunctionDefinitionRecursion)] }"
"--------------------------------------------------"
"Applies production Nonterminal(FunctionDefinitionRecursion) --> [Epsilon]"
"Next input token: Token { class: Keyword, lexeme: \"program\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList), Epsilon] }"
"--------------------------------------------------"
"Matched EPSILON, popped off parsing_stack"
"Next input token: Token { class: Keyword, lexeme: \"program\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList)] }"
"--------------------------------------------------"
"Popped semantic action: FunctionDefinitionList"
"Next input token: Token { class: Keyword, lexeme: \"program\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" })] }"
"--------------------------------------------------"
"Matched terminal: Token { class: Keyword, lexeme: \"program\" }, popped off parsing_stack"
"Next input token: Token { class: Keyword, lexeme: \"program\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody)] }"
"--------------------------------------------------"
"Applies production Nonterminal(FunctionBody) --> [Terminal(Token { class: OpenCurlyBrace, lexeme: \"{\" }), Nonterminal(VariableDeclarationRecursionThenStatementRecursionA), SemanticAction(StatementBlock), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" })]"
"Next input token: Token { class: OpenCurlyBrace, lexeme: \"{\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(VariableDeclarationRecursionThenStatementRecursionA), Terminal(Token { class: OpenCurlyBrace, lexeme: \"{\" })] }"
"--------------------------------------------------"
"Matched terminal: Token { class: OpenCurlyBrace, lexeme: \"{\" }, popped off parsing_stack"
"Next input token: Token { class: OpenCurlyBrace, lexeme: \"{\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(VariableDeclarationRecursionThenStatementRecursionA)] }"
"--------------------------------------------------"
"Applies production Nonterminal(VariableDeclarationRecursionThenStatementRecursionA) --> [SemanticAction(Id), Terminal(Token { class: Identifier, lexeme: \"id\" }), Nonterminal(VariableDeclarationRecursionThenStatementRecursionB)]"
"Next input token: Token { class: Identifier, lexeme: \"\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(VariableDeclarationRecursionThenStatementRecursionB), Terminal(Token { class: Identifier, lexeme: \"id\" }), SemanticAction(Id)] }"
"--------------------------------------------------"
"Popped semantic action: Id"
"Next input token: Token { class: Identifier, lexeme: \"Test\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(VariableDeclarationRecursionThenStatementRecursionB), Terminal(Token { class: Identifier, lexeme: \"id\" })] }"
"--------------------------------------------------"
"Matched terminal: Token { class: Identifier, lexeme: \"Test\" }, popped off parsing_stack"
"Next input token: Token { class: Identifier, lexeme: \"Test\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(VariableDeclarationRecursionThenStatementRecursionB)] }"
"--------------------------------------------------"
"Applies production Nonterminal(VariableDeclarationRecursionThenStatementRecursionB) --> [SemanticAction(Id), Terminal(Token { class: Identifier, lexeme: \"id\" }), Nonterminal(ArraySizeRecursion), SemanticAction(ArraySizeList), SemanticAction(VariableDeclaration), Terminal(Token { class: Semicolon, lexeme: \";\" }), Nonterminal(VariableDeclarationRecursionThenStatementRecursionA)]"
"Next input token: Token { class: Identifier, lexeme: \"\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(VariableDeclarationRecursionThenStatementRecursionA), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(VariableDeclaration), SemanticAction(ArraySizeList), Nonterminal(ArraySizeRecursion), Terminal(Token { class: Identifier, lexeme: \"id\" }), SemanticAction(Id)] }"
"--------------------------------------------------"
"Popped semantic action: Id"
"Next input token: Token { class: Identifier, lexeme: \"test\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(VariableDeclarationRecursionThenStatementRecursionA), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(VariableDeclaration), SemanticAction(ArraySizeList), Nonterminal(ArraySizeRecursion), Terminal(Token { class: Identifier, lexeme: \"id\" })] }"
"--------------------------------------------------"
"Matched terminal: Token { class: Identifier, lexeme: \"test\" }, popped off parsing_stack"
"Next input token: Token { class: Identifier, lexeme: \"test\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(VariableDeclarationRecursionThenStatementRecursionA), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(VariableDeclaration), SemanticAction(ArraySizeList), Nonterminal(ArraySizeRecursion)] }"
"--------------------------------------------------"
"Applies production Nonterminal(ArraySizeRecursion) --> [Epsilon]"
"Next input token: Token { class: Semicolon, lexeme: \";\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(VariableDeclarationRecursionThenStatementRecursionA), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(VariableDeclaration), SemanticAction(ArraySizeList), Epsilon] }"
"--------------------------------------------------"
"Matched EPSILON, popped off parsing_stack"
"Next input token: Token { class: Semicolon, lexeme: \";\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(VariableDeclarationRecursionThenStatementRecursionA), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(VariableDeclaration), SemanticAction(ArraySizeList)] }"
"--------------------------------------------------"
"Popped semantic action: ArraySizeList"
"Next input token: Token { class: Semicolon, lexeme: \";\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(VariableDeclarationRecursionThenStatementRecursionA), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(VariableDeclaration)] }"
"--------------------------------------------------"
"Popped semantic action: VariableDeclaration"
"Next input token: Token { class: Semicolon, lexeme: \";\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(VariableDeclarationRecursionThenStatementRecursionA), Terminal(Token { class: Semicolon, lexeme: \";\" })] }"
"--------------------------------------------------"
"Matched terminal: Token { class: Semicolon, lexeme: \";\" }, popped off parsing_stack"
"Next input token: Token { class: Semicolon, lexeme: \";\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(VariableDeclarationRecursionThenStatementRecursionA)] }"
"--------------------------------------------------"
"Applies production Nonterminal(VariableDeclarationRecursionThenStatementRecursionA) --> [SemanticAction(Id), Terminal(Token { class: Identifier, lexeme: \"id\" }), Nonterminal(VariableDeclarationRecursionThenStatementRecursionB)]"
"Next input token: Token { class: Identifier, lexeme: \"\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(VariableDeclarationRecursionThenStatementRecursionB), Terminal(Token { class: Identifier, lexeme: \"id\" }), SemanticAction(Id)] }"
"--------------------------------------------------"
"Popped semantic action: Id"
"Next input token: Token { class: Identifier, lexeme: \"test\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(VariableDeclarationRecursionThenStatementRecursionB), Terminal(Token { class: Identifier, lexeme: \"id\" })] }"
"--------------------------------------------------"
"Matched terminal: Token { class: Identifier, lexeme: \"test\" }, popped off parsing_stack"
"Next input token: Token { class: Identifier, lexeme: \"test\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(VariableDeclarationRecursionThenStatementRecursionB)] }"
"--------------------------------------------------"
"Applies production Nonterminal(VariableDeclarationRecursionThenStatementRecursionB) --> [Nonterminal(VariableTail), SemanticAction(Variable), Terminal(Token { class: AssignmentOperator, lexeme: \"=\" }), Nonterminal(Expression), SemanticAction(Expression), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(AssignmentStatement), Nonterminal(StatementRecursion)]"
"Next input token: Token { class: AssignmentOperator, lexeme: \"=\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(Expression), Terminal(Token { class: AssignmentOperator, lexeme: \"=\" }), SemanticAction(Variable), Nonterminal(VariableTail)] }"
"--------------------------------------------------"
"Applies production Nonterminal(VariableTail) --> [Nonterminal(IndexingRecursion), SemanticAction(ArrayIndexingList), SemanticAction(DataMember), Nonterminal(VariableTailTail)]"
"Next input token: Token { class: AssignmentOperator, lexeme: \"=\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(Expression), Terminal(Token { class: AssignmentOperator, lexeme: \"=\" }), SemanticAction(Variable), Nonterminal(VariableTailTail), SemanticAction(DataMember), SemanticAction(ArrayIndexingList), Nonterminal(IndexingRecursion)] }"
"--------------------------------------------------"
"Applies production Nonterminal(IndexingRecursion) --> [Epsilon]"
"Next input token: Token { class: AssignmentOperator, lexeme: \"=\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(Expression), Terminal(Token { class: AssignmentOperator, lexeme: \"=\" }), SemanticAction(Variable), Nonterminal(VariableTailTail), SemanticAction(DataMember), SemanticAction(ArrayIndexingList), Epsilon] }"
"--------------------------------------------------"
"Matched EPSILON, popped off parsing_stack"
"Next input token: Token { class: AssignmentOperator, lexeme: \"=\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(Expression), Terminal(Token { class: AssignmentOperator, lexeme: \"=\" }), SemanticAction(Variable), Nonterminal(VariableTailTail), SemanticAction(DataMember), SemanticAction(ArrayIndexingList)] }"
"--------------------------------------------------"
"Popped semantic action: ArrayIndexingList"
"Next input token: Token { class: AssignmentOperator, lexeme: \"=\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(Expression), Terminal(Token { class: AssignmentOperator, lexeme: \"=\" }), SemanticAction(Variable), Nonterminal(VariableTailTail), SemanticAction(DataMember)] }"
"--------------------------------------------------"
"Popped semantic action: DataMember"
"Next input token: Token { class: AssignmentOperator, lexeme: \"=\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(Expression), Terminal(Token { class: AssignmentOperator, lexeme: \"=\" }), SemanticAction(Variable), Nonterminal(VariableTailTail)] }"
"--------------------------------------------------"
"Applies production Nonterminal(VariableTailTail) --> [Epsilon]"
"Next input token: Token { class: AssignmentOperator, lexeme: \"=\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(Expression), Terminal(Token { class: AssignmentOperator, lexeme: \"=\" }), SemanticAction(Variable), Epsilon] }"
"--------------------------------------------------"
"Matched EPSILON, popped off parsing_stack"
"Next input token: Token { class: AssignmentOperator, lexeme: \"=\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(Expression), Terminal(Token { class: AssignmentOperator, lexeme: \"=\" }), SemanticAction(Variable)] }"
"--------------------------------------------------"
"Popped semantic action: Variable"
"Next input token: Token { class: AssignmentOperator, lexeme: \"=\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(Expression), Terminal(Token { class: AssignmentOperator, lexeme: \"=\" })] }"
"--------------------------------------------------"
"Matched terminal: Token { class: AssignmentOperator, lexeme: \"=\" }, popped off parsing_stack"
"Next input token: Token { class: AssignmentOperator, lexeme: \"=\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(Expression)] }"
"--------------------------------------------------"
"Applies production Nonterminal(Expression) --> [Nonterminal(ArithmeticExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticOrRelationalExpression)]"
"Next input token: Token { class: Identifier, lexeme: \"\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpression)] }"
"--------------------------------------------------"
"Applies production Nonterminal(ArithmeticExpression) --> [Nonterminal(Term), SemanticAction(Term), Nonterminal(ArithmeticExpressionTail)]"
"Next input token: Token { class: Identifier, lexeme: \"\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail), SemanticAction(Term), Nonterminal(Term)] }"
"--------------------------------------------------"
"Applies production Nonterminal(Term) --> [Nonterminal(Factor), SemanticAction(Factor), Nonterminal(TermRecursion)]"
"Next input token: Token { class: Identifier, lexeme: \"\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail), SemanticAction(Term), Nonterminal(TermRecursion), SemanticAction(Factor), Nonterminal(Factor)] }"
"--------------------------------------------------"
"Applies production Nonterminal(Factor) --> [Nonterminal(FunctionCallOrVariable), SemanticAction(FactorVariable)]"
"Next input token: Token { class: Identifier, lexeme: \"\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail), SemanticAction(Term), Nonterminal(TermRecursion), SemanticAction(Factor), SemanticAction(FactorVariable), Nonterminal(FunctionCallOrVariable)] }"
"--------------------------------------------------"
"Applies production Nonterminal(FunctionCallOrVariable) --> [SemanticAction(Id), Terminal(Token { class: Identifier, lexeme: \"id\" }), Nonterminal(FunctionCallOrVariableTail)]"
"Next input token: Token { class: Identifier, lexeme: \"\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail), SemanticAction(Term), Nonterminal(TermRecursion), SemanticAction(Factor), SemanticAction(FactorVariable), Nonterminal(FunctionCallOrVariableTail), Terminal(Token { class: Identifier, lexeme: \"id\" }), SemanticAction(Id)] }"
"--------------------------------------------------"
"Popped semantic action: Id"
"Next input token: Token { class: Identifier, lexeme: \"test\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail), SemanticAction(Term), Nonterminal(TermRecursion), SemanticAction(Factor), SemanticAction(FactorVariable), Nonterminal(FunctionCallOrVariableTail), Terminal(Token { class: Identifier, lexeme: \"id\" })] }"
"--------------------------------------------------"
"Matched terminal: Token { class: Identifier, lexeme: \"test\" }, popped off parsing_stack"
"Next input token: Token { class: Identifier, lexeme: \"test\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail), SemanticAction(Term), Nonterminal(TermRecursion), SemanticAction(Factor), SemanticAction(FactorVariable), Nonterminal(FunctionCallOrVariableTail)] }"
"--------------------------------------------------"
"Applies production Nonterminal(FunctionCallOrVariableTail) --> [Nonterminal(FunctionCallParensOrIndexing), Nonterminal(FunctionCallOrVariableTailRecursion)]"
"Next input token: Token { class: AccessorOperator, lexeme: \".\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail), SemanticAction(Term), Nonterminal(TermRecursion), SemanticAction(Factor), SemanticAction(FactorVariable), Nonterminal(FunctionCallOrVariableTailRecursion), Nonterminal(FunctionCallParensOrIndexing)] }"
"--------------------------------------------------"
"Applies production Nonterminal(FunctionCallParensOrIndexing) --> [Nonterminal(IndexingRecursion), SemanticAction(ArrayIndexingList), SemanticAction(DataMember)]"
"Next input token: Token { class: AccessorOperator, lexeme: \".\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail), SemanticAction(Term), Nonterminal(TermRecursion), SemanticAction(Factor), SemanticAction(FactorVariable), Nonterminal(FunctionCallOrVariableTailRecursion), SemanticAction(DataMember), SemanticAction(ArrayIndexingList), Nonterminal(IndexingRecursion)] }"
"--------------------------------------------------"
"Applies production Nonterminal(IndexingRecursion) --> [Epsilon]"
"Next input token: Token { class: AccessorOperator, lexeme: \".\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail), SemanticAction(Term), Nonterminal(TermRecursion), SemanticAction(Factor), SemanticAction(FactorVariable), Nonterminal(FunctionCallOrVariableTailRecursion), SemanticAction(DataMember), SemanticAction(ArrayIndexingList), Epsilon] }"
"--------------------------------------------------"
"Matched EPSILON, popped off parsing_stack"
"Next input token: Token { class: AccessorOperator, lexeme: \".\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail), SemanticAction(Term), Nonterminal(TermRecursion), SemanticAction(Factor), SemanticAction(FactorVariable), Nonterminal(FunctionCallOrVariableTailRecursion), SemanticAction(DataMember), SemanticAction(ArrayIndexingList)] }"
"--------------------------------------------------"
"Popped semantic action: ArrayIndexingList"
"Next input token: Token { class: AccessorOperator, lexeme: \".\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail), SemanticAction(Term), Nonterminal(TermRecursion), SemanticAction(Factor), SemanticAction(FactorVariable), Nonterminal(FunctionCallOrVariableTailRecursion), SemanticAction(DataMember)] }"
"--------------------------------------------------"
"Popped semantic action: DataMember"
"Next input token: Token { class: AccessorOperator, lexeme: \".\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail), SemanticAction(Term), Nonterminal(TermRecursion), SemanticAction(Factor), SemanticAction(FactorVariable), Nonterminal(FunctionCallOrVariableTailRecursion)] }"
"--------------------------------------------------"
"Applies production Nonterminal(FunctionCallOrVariableTailRecursion) --> [Terminal(Token { class: AccessorOperator, lexeme: \".\" }), SemanticAction(Id), Terminal(Token { class: Identifier, lexeme: \"id\" }), Nonterminal(FunctionCallOrVariableTail)]"
"Next input token: Token { class: AccessorOperator, lexeme: \".\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail), SemanticAction(Term), Nonterminal(TermRecursion), SemanticAction(Factor), SemanticAction(FactorVariable), Nonterminal(FunctionCallOrVariableTail), Terminal(Token { class: Identifier, lexeme: \"id\" }), SemanticAction(Id), Terminal(Token { class: AccessorOperator, lexeme: \".\" })] }"
"--------------------------------------------------"
"Matched terminal: Token { class: AccessorOperator, lexeme: \".\" }, popped off parsing_stack"
"Next input token: Token { class: AccessorOperator, lexeme: \".\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail), SemanticAction(Term), Nonterminal(TermRecursion), SemanticAction(Factor), SemanticAction(FactorVariable), Nonterminal(FunctionCallOrVariableTail), Terminal(Token { class: Identifier, lexeme: \"id\" }), SemanticAction(Id)] }"
"--------------------------------------------------"
"Popped semantic action: Id"
"Next input token: Token { class: Identifier, lexeme: \"randomize\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail), SemanticAction(Term), Nonterminal(TermRecursion), SemanticAction(Factor), SemanticAction(FactorVariable), Nonterminal(FunctionCallOrVariableTail), Terminal(Token { class: Identifier, lexeme: \"id\" })] }"
"--------------------------------------------------"
"Matched terminal: Token { class: Identifier, lexeme: \"randomize\" }, popped off parsing_stack"
"Next input token: Token { class: Identifier, lexeme: \"randomize\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail), SemanticAction(Term), Nonterminal(TermRecursion), SemanticAction(Factor), SemanticAction(FactorVariable), Nonterminal(FunctionCallOrVariableTail)] }"
"--------------------------------------------------"
"Applies production Nonterminal(FunctionCallOrVariableTail) --> [Nonterminal(FunctionCallParensOrIndexing), Nonterminal(FunctionCallOrVariableTailRecursion)]"
"Next input token: Token { class: OpenParens, lexeme: \"(\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail), SemanticAction(Term), Nonterminal(TermRecursion), SemanticAction(Factor), SemanticAction(FactorVariable), Nonterminal(FunctionCallOrVariableTailRecursion), Nonterminal(FunctionCallParensOrIndexing)] }"
"--------------------------------------------------"
"Applies production Nonterminal(FunctionCallParensOrIndexing) --> [Terminal(Token { class: OpenParens, lexeme: \"(\" }), Nonterminal(FunctionArguments), SemanticAction(FunctionArguments), SemanticAction(FactorFunctionCall), Terminal(Token { class: CloseParens, lexeme: \")\" })]"
"Next input token: Token { class: OpenParens, lexeme: \"(\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail), SemanticAction(Term), Nonterminal(TermRecursion), SemanticAction(Factor), SemanticAction(FactorVariable), Nonterminal(FunctionCallOrVariableTailRecursion), Terminal(Token { class: CloseParens, lexeme: \")\" }), SemanticAction(FactorFunctionCall), SemanticAction(FunctionArguments), Nonterminal(FunctionArguments), Terminal(Token { class: OpenParens, lexeme: \"(\" })] }"
"--------------------------------------------------"
"Matched terminal: Token { class: OpenParens, lexeme: \"(\" }, popped off parsing_stack"
"Next input token: Token { class: OpenParens, lexeme: \"(\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail), SemanticAction(Term), Nonterminal(TermRecursion), SemanticAction(Factor), SemanticAction(FactorVariable), Nonterminal(FunctionCallOrVariableTailRecursion), Terminal(Token { class: CloseParens, lexeme: \")\" }), SemanticAction(FactorFunctionCall), SemanticAction(FunctionArguments), Nonterminal(FunctionArguments)] }"
"--------------------------------------------------"
"Applies production Nonterminal(FunctionArguments) --> [Epsilon]"
"Next input token: Token { class: CloseParens, lexeme: \")\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail), SemanticAction(Term), Nonterminal(TermRecursion), SemanticAction(Factor), SemanticAction(FactorVariable), Nonterminal(FunctionCallOrVariableTailRecursion), Terminal(Token { class: CloseParens, lexeme: \")\" }), SemanticAction(FactorFunctionCall), SemanticAction(FunctionArguments), Epsilon] }"
"--------------------------------------------------"
"Matched EPSILON, popped off parsing_stack"
"Next input token: Token { class: CloseParens, lexeme: \")\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail), SemanticAction(Term), Nonterminal(TermRecursion), SemanticAction(Factor), SemanticAction(FactorVariable), Nonterminal(FunctionCallOrVariableTailRecursion), Terminal(Token { class: CloseParens, lexeme: \")\" }), SemanticAction(FactorFunctionCall), SemanticAction(FunctionArguments)] }"
"--------------------------------------------------"
"Popped semantic action: FunctionArguments"
"Next input token: Token { class: CloseParens, lexeme: \")\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail), SemanticAction(Term), Nonterminal(TermRecursion), SemanticAction(Factor), SemanticAction(FactorVariable), Nonterminal(FunctionCallOrVariableTailRecursion), Terminal(Token { class: CloseParens, lexeme: \")\" }), SemanticAction(FactorFunctionCall)] }"
"--------------------------------------------------"
"Popped semantic action: FactorFunctionCall"
"Next input token: Token { class: CloseParens, lexeme: \")\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail), SemanticAction(Term), Nonterminal(TermRecursion), SemanticAction(Factor), SemanticAction(FactorVariable), Nonterminal(FunctionCallOrVariableTailRecursion), Terminal(Token { class: CloseParens, lexeme: \")\" })] }"
"--------------------------------------------------"
"Matched terminal: Token { class: CloseParens, lexeme: \")\" }, popped off parsing_stack"
"Next input token: Token { class: CloseParens, lexeme: \")\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail), SemanticAction(Term), Nonterminal(TermRecursion), SemanticAction(Factor), SemanticAction(FactorVariable), Nonterminal(FunctionCallOrVariableTailRecursion)] }"
"--------------------------------------------------"
"Applies production Nonterminal(FunctionCallOrVariableTailRecursion) --> [Epsilon]"
"Next input token: Token { class: Semicolon, lexeme: \";\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail), SemanticAction(Term), Nonterminal(TermRecursion), SemanticAction(Factor), SemanticAction(FactorVariable), Epsilon] }"
"--------------------------------------------------"
"Matched EPSILON, popped off parsing_stack"
"Next input token: Token { class: Semicolon, lexeme: \";\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail), SemanticAction(Term), Nonterminal(TermRecursion), SemanticAction(Factor), SemanticAction(FactorVariable)] }"
"--------------------------------------------------"
"Popped semantic action: FactorVariable"
"Next input token: Token { class: Semicolon, lexeme: \";\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail), SemanticAction(Term), Nonterminal(TermRecursion), SemanticAction(Factor)] }"
"--------------------------------------------------"
"Popped semantic action: Factor"
"Next input token: Token { class: Semicolon, lexeme: \";\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail), SemanticAction(Term), Nonterminal(TermRecursion)] }"
"--------------------------------------------------"
"Applies production Nonterminal(TermRecursion) --> [Epsilon]"
"Next input token: Token { class: Semicolon, lexeme: \";\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail), SemanticAction(Term), Epsilon] }"
"--------------------------------------------------"
"Matched EPSILON, popped off parsing_stack"
"Next input token: Token { class: Semicolon, lexeme: \";\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail), SemanticAction(Term)] }"
"--------------------------------------------------"
"Popped semantic action: Term"
"Next input token: Token { class: Semicolon, lexeme: \";\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Nonterminal(ArithmeticExpressionTail)] }"
"--------------------------------------------------"
"Applies production Nonterminal(ArithmeticExpressionTail) --> [Epsilon]"
"Next input token: Token { class: Semicolon, lexeme: \";\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression), Epsilon] }"
"--------------------------------------------------"
"Matched EPSILON, popped off parsing_stack"
"Next input token: Token { class: Semicolon, lexeme: \";\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression), SemanticAction(ArithmeticExpression)] }"
"--------------------------------------------------"
"Popped semantic action: ArithmeticExpression"
"Next input token: Token { class: Semicolon, lexeme: \";\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Nonterminal(ArithmeticOrRelationalExpression)] }"
"--------------------------------------------------"
"Applies production Nonterminal(ArithmeticOrRelationalExpression) --> [Epsilon]"
"Next input token: Token { class: Semicolon, lexeme: \";\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression), Epsilon] }"
"--------------------------------------------------"
"Matched EPSILON, popped off parsing_stack"
"Next input token: Token { class: Semicolon, lexeme: \";\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(Expression)] }"
"--------------------------------------------------"
"Popped semantic action: Expression"
"Next input token: Token { class: Semicolon, lexeme: \";\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement), Terminal(Token { class: Semicolon, lexeme: \";\" })] }"
"--------------------------------------------------"
"Matched terminal: Token { class: Semicolon, lexeme: \";\" }, popped off parsing_stack"
"Next input token: Token { class: Semicolon, lexeme: \";\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion), SemanticAction(AssignmentStatement)] }"
"--------------------------------------------------"
"Popped semantic action: AssignmentStatement"
"Next input token: Token { class: CloseCurlyBrace, lexeme: \"}\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Nonterminal(StatementRecursion)] }"
"--------------------------------------------------"
"Applies production Nonterminal(StatementRecursion) --> [Epsilon]"
"Next input token: Token { class: CloseCurlyBrace, lexeme: \"}\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock), Epsilon] }"
"--------------------------------------------------"
"Matched EPSILON, popped off parsing_stack"
"Next input token: Token { class: CloseCurlyBrace, lexeme: \"}\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" }), SemanticAction(StatementBlock)] }"
"--------------------------------------------------"
"Popped semantic action: StatementBlock"
"Next input token: Token { class: CloseCurlyBrace, lexeme: \"}\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Terminal(Token { class: CloseCurlyBrace, lexeme: \"}\" })] }"
"--------------------------------------------------"
"Matched terminal: Token { class: CloseCurlyBrace, lexeme: \"}\" }, popped off parsing_stack"
"Next input token: Token { class: CloseCurlyBrace, lexeme: \"}\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily)] }"
"--------------------------------------------------"
"Popped semantic action: ProgramFamily"
"Next input token: Token { class: Semicolon, lexeme: \";\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" })] }"
"--------------------------------------------------"
"Matched terminal: Token { class: Semicolon, lexeme: \";\" }, popped off parsing_stack"
"Next input token: Token { class: Semicolon, lexeme: \";\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" })] }"
"--------------------------------------------------"
