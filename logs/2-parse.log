"Applies production Nonterminal(Program) --> [Nonterminal(ClassDeclarationRecursion), SemanticAction(ClassDeclarationList), Nonterminal(FunctionDefinitionRecursion), SemanticAction(FunctionDefinitionList), Terminal(Token { class: Keyword, lexeme: \"program\" }), Nonterminal(FunctionBody), SemanticAction(ProgramFamily), Terminal(Token { class: Semicolon, lexeme: \";\" })]"
"Next input token: Token { class: Identifier, lexeme: \"\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList), Nonterminal(FunctionDefinitionRecursion), SemanticAction(ClassDeclarationList), Nonterminal(ClassDeclarationRecursion)] }"
"--------------------------------------------------"
"Applies production Nonterminal(ClassDeclarationRecursion) --> [Epsilon]"
"Next input token: Token { class: Identifier, lexeme: \"\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList), Nonterminal(FunctionDefinitionRecursion), SemanticAction(ClassDeclarationList), Epsilon] }"
"--------------------------------------------------"
"Matched EPSILON, popped off parsing_stack"
"Next input token: Token { class: Identifier, lexeme: \"namespace\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList), Nonterminal(FunctionDefinitionRecursion), SemanticAction(ClassDeclarationList)] }"
"--------------------------------------------------"
"Popped semantic action: ClassDeclarationList"
"Next input token: Token { class: Identifier, lexeme: \"namespace\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList), Nonterminal(FunctionDefinitionRecursion)] }"
"--------------------------------------------------"
"Applies production Nonterminal(FunctionDefinitionRecursion) --> [Nonterminal(FunctionDefinition), SemanticAction(FunctionDefinition), Nonterminal(FunctionDefinitionRecursion)]"
"Next input token: Token { class: Identifier, lexeme: \"\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList), Nonterminal(FunctionDefinitionRecursion), SemanticAction(FunctionDefinition), Nonterminal(FunctionDefinition)] }"
"--------------------------------------------------"
"Applies production Nonterminal(FunctionDefinition) --> [Nonterminal(FunctionHeader), Nonterminal(FunctionBody), Terminal(Token { class: Semicolon, lexeme: \";\" })]"
"Next input token: Token { class: Identifier, lexeme: \"\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList), Nonterminal(FunctionDefinitionRecursion), SemanticAction(FunctionDefinition), Terminal(Token { class: Semicolon, lexeme: \";\" }), Nonterminal(FunctionBody), Nonterminal(FunctionHeader)] }"
"--------------------------------------------------"
"Applies production Nonterminal(FunctionHeader) --> [SemanticAction(Type), Nonterminal(Type), Nonterminal(OptionalNamespacing), Terminal(Token { class: OpenParens, lexeme: \"(\" }), Nonterminal(FunctionParameters), SemanticAction(FunctionParameterList), Terminal(Token { class: CloseParens, lexeme: \")\" })]"
"Next input token: Token { class: Identifier, lexeme: \"\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList), Nonterminal(FunctionDefinitionRecursion), SemanticAction(FunctionDefinition), Terminal(Token { class: Semicolon, lexeme: \";\" }), Nonterminal(FunctionBody), Terminal(Token { class: CloseParens, lexeme: \")\" }), SemanticAction(FunctionParameterList), Nonterminal(FunctionParameters), Terminal(Token { class: OpenParens, lexeme: \"(\" }), Nonterminal(OptionalNamespacing), Nonterminal(Type), SemanticAction(Type)] }"
"--------------------------------------------------"
"Popped semantic action: Type"
"Next input token: Token { class: Identifier, lexeme: \"namespace\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList), Nonterminal(FunctionDefinitionRecursion), SemanticAction(FunctionDefinition), Terminal(Token { class: Semicolon, lexeme: \";\" }), Nonterminal(FunctionBody), Terminal(Token { class: CloseParens, lexeme: \")\" }), SemanticAction(FunctionParameterList), Nonterminal(FunctionParameters), Terminal(Token { class: OpenParens, lexeme: \"(\" }), Nonterminal(OptionalNamespacing), Nonterminal(Type)] }"
"--------------------------------------------------"
"Applies production Nonterminal(Type) --> [Terminal(Token { class: Identifier, lexeme: \"id\" })]"
"Next input token: Token { class: Identifier, lexeme: \"\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList), Nonterminal(FunctionDefinitionRecursion), SemanticAction(FunctionDefinition), Terminal(Token { class: Semicolon, lexeme: \";\" }), Nonterminal(FunctionBody), Terminal(Token { class: CloseParens, lexeme: \")\" }), SemanticAction(FunctionParameterList), Nonterminal(FunctionParameters), Terminal(Token { class: OpenParens, lexeme: \"(\" }), Nonterminal(OptionalNamespacing), Terminal(Token { class: Identifier, lexeme: \"id\" })] }"
"--------------------------------------------------"
"Matched terminal: Token { class: Identifier, lexeme: \"namespace\" }, popped off parsing_stack"
"Next input token: Token { class: Identifier, lexeme: \"namespace\" }"
"Stack { stack: [Terminal(Token { class: EndOfInput, lexeme: \"\" }), Terminal(Token { class: Semicolon, lexeme: \";\" }), SemanticAction(ProgramFamily), Nonterminal(FunctionBody), Terminal(Token { class: Keyword, lexeme: \"program\" }), SemanticAction(FunctionDefinitionList), Nonterminal(FunctionDefinitionRecursion), SemanticAction(FunctionDefinition), Terminal(Token { class: Semicolon, lexeme: \";\" }), Nonterminal(FunctionBody), Terminal(Token { class: CloseParens, lexeme: \")\" }), SemanticAction(FunctionParameterList), Nonterminal(FunctionParameters), Terminal(Token { class: OpenParens, lexeme: \"(\" }), Nonterminal(OptionalNamespacing)] }"
"--------------------------------------------------"
